// Generated by TypeScript
var ItemState;
(function (ItemState) {
    ItemState[ItemState["Default"] = 0] = "Default";
    ItemState[ItemState["Active"] = 1] = "Active";
    ItemState[ItemState["AbilityPhase"] = 2] = "AbilityPhase";
    ItemState[ItemState["Cooldown"] = 3] = "Cooldown";
    ItemState[ItemState["Muted"] = 4] = "Muted";
})(ItemState || (ItemState = {}));
var ItemPanel = (function () {
    function ItemPanel(parent, slot) {
        this.keybind = "";
        this.slot = slot;
        this.panel = $.CreatePanel("Panel", parent, "");
        this.panel.BLoadLayoutSnippet("itemSlot");
        this.update();
    }
    ItemPanel.prototype.update = function () {
        this.unit = Players.GetQueryUnit(Players.GetLocalPlayer());
        if (this.unit === -1) {
            this.unit = Players.GetLocalPlayerPortraitUnit();
        }
        this.item = Entities.GetItemInSlot(this.unit, this.slot);
        this.itemName = Abilities.GetAbilityName(this.item);
        if (this.keybind == "") {
            this.keybind = Abilities.GetKeybind(this.item);
            this.panel.FindChildTraverse("hotkey").text = this.keybind;
        }
        this.panel.SetHasClass("Muted", Items.IsMuted(this.item));
        this.panel.SetHasClass("Primary", Items.ShouldDisplayCharges(this.item));
        this.panel.SetHasClass("Secondary", Items.ShowSecondaryCharges(this.item));
        //Due to the native of inverting IsPassive, need to do empty checks first.
        if (this.item == -1) {
            this.panel.RemoveClass("Active");
        }
        else {
            this.panel.SetHasClass("Active", !Abilities.IsPassive(this.item));
        }
        //WTF Valve, why not just have secondary being secondary and primary being primary!
        if (Abilities.GetToggleState(this.item)) {
            this.panel.FindChildTraverse("primary").text = Items.GetDisplayedCharges(this.item).toString();
            this.panel.FindChildTraverse("secondary").text = Items.GetSecondaryCharges(this.item).toString();
        }
        else {
            this.panel.FindChildTraverse("secondary").text = Items.GetDisplayedCharges(this.item).toString();
            this.panel.FindChildTraverse("primary").text = Items.GetSecondaryCharges(this.item).toString();
        }
        var itemImage = this.panel.FindChildTraverse("bg");
        itemImage.SetImage("s2r://panorama/images/items/" + ((this.item == -1) ? "emptyitembg" : Items.GetAbilityTextureSF(this.item)) + ".png");
    };
    return ItemPanel;
}());
