// Generated by TypeScript
function altDump(name, object, reference: Panel) {
    $.Msg("=====================================");
    $.Msg("This is a giant dump in " + name);
    $.Msg("=====================================");
    let referenceList = [];
    for (let v in reference) {
        referenceList[v] = typeof(reference[v]);
    }
    for (let v in object) {
        if (referenceList[v] !== undefined) {
            continue;
        }
        if(typeof object[v] == "object") {
            $.Msg(v + " = {");
            for (let w in object[v]) {
                $.Msg("\t"+v+"." + w + " = " + (""+object[v][w]));
            }
            $.Msg("}");
        } else {
            $.Msg(name+"." + v + " = (" + typeof object[v] + ") " + object[v]);
        }
    }
    $.Msg("=====================================");
}
enum ItemState {
    Default = 0,
    Active,
    AbilityPhase,
    Cooldown,
    Muted
}
interface DragCallback {
    removePositionBeforeDrop: boolean;
    offsetX: number;
    offsetY: number;
    displayPanel: Panel;
}

class ItemPanel {
    panel: Panel;
    slot: number;
    unit: number;

    item:number;
    itemName:string;

    state: ItemState;

    keybind: string = "";

    constructor(parent: Panel, slot:number) {
        this.slot = slot;
        this.panel = $.CreatePanel( "Panel", parent, "" );
        this.panel.BLoadLayoutSnippet( "itemSlot" );
        this.panel.SetPanelEvent("onmouseover", this.onMouseOver.bind(this));
        this.panel.SetPanelEvent("onmouseout", this.onMouseOut.bind(this));
        this.panel.SetPanelEvent("oncontextmenu", this.onRightClick.bind(this));
        $.RegisterEventHandler("DragStart", this.panel, this.onDragStart.bind(this));
        $.RegisterEventHandler("DragEnd", this.panel, this.onDragEnd.bind(this));
        $.RegisterEventHandler("DragDrop", this.panel, this.onDragDrop.bind(this));
        this.update();
    }
    onMouseOver() {
        if (this.item == -1)
            return;
        $.DispatchEvent("DOTAShowAbilityInventoryItemTooltip", this.panel, this.unit, this.slot);
    }
    onMouseOut() {
        $.DispatchEvent("DOTAHideAbilityTooltip", this.panel);
    }
    onRightClick() {
        let panel = $.CreatePanel("ContextMenuScript", this.panel, "");
        panel.AddClass("ContextMenu_NoArrow");
        panel.AddClass("ContextMenu_NoBorder");
        panel.GetContentsPanel().BLoadLayout("file://{resources}/layout/custom_game/inventory/itemslot_contextmenu.xml", false, false);
        panel.GetContentsPanel().SetHasClass("NotInShop", !Items.IsPurchasable(this.item));
        panel.GetContentsPanel().SetHasClass("Unsellable", !Items.IsSellable(this.item));
        panel.GetContentsPanel().SetHasClass("UnDisassemblable", !Items.IsDisassemblable(this.item));
        panel.GetContentsPanel().SetHasClass("UnAlertable", !Items.IsAlertableItem(this.item));
        panel.GetContentsPanel().SetHasClass("NotInStash", this.slot < 6);
        panel.GetContentsPanel().SetHasClass("UnStashable", !Items.IsDroppable(this.item) || !Entities.IsInRangeOfShop(this.unit, 0, true));
        //TODO: LOCKED / UNLOCKED VALVE PLZ
        panel.GetContentsPanel().SetAttributeInt("itemID", this.item);
        //altDump("ContextMenu", panel, this.panel);
    }
    onDragStart(panelID: string, dragCallbacks:DragCallback) {
        //If we are empty, fuck dragging.
        if (this.item == -1) {
            return true;
        }
        let panel = $.CreatePanel("Image", this.panel, "dragImage");
        panel.SetAttributeInt("itemID", this.item);
        panel.SetAttributeInt("unitID", this.unit);
        panel.SetImage("s2r://panorama/images/items/" + Items.GetAbilityTextureSF(this.item) + ".png");
        dragCallbacks.displayPanel = panel;
        dragCallbacks.offsetX = 0;
        dragCallbacks.offsetY = 0;
        return true;
    }
    onDragEnd(panelID: string, draggedPanel: Panel) {
        let isSwapping = draggedPanel.GetAttributeInt("swapping", 0);
        if (!isSwapping) {
            $.Msg("Drop this bitch");
            let itemID = draggedPanel.GetAttributeInt("itemID", -1);
            let unitID = draggedPanel.GetAttributeInt("unitID", -1);
            Game.DropItemAtCursor(unitID, itemID);
        }
        draggedPanel.DeleteAsync(0);
        return true;
    }
    onDragDrop(panelID:string, draggedPanel: Panel) {
        draggedPanel.SetAttributeInt("swapping", 1);
        if (draggedPanel.GetAttributeInt("itemID", -1) == this.item) {
            return true;
        }
        Game.PrepareUnitOrders({
            OrderType: dotaunitorder_t.DOTA_UNIT_ORDER_MOVE_ITEM,
            TargetIndex: this.slot,
            AbilityIndex: draggedPanel.GetAttributeInt("itemID", -1)
        });
        return true;
    }

    update() {
        this.unit = Players.GetQueryUnit(Players.GetLocalPlayer());
        if (this.unit === -1 ) {
            this.unit = Players.GetLocalPlayerPortraitUnit();
        }
        this.item = Entities.GetItemInSlot(this.unit, this.slot);
        this.itemName = Abilities.GetAbilityName(this.item);
        if (this.keybind == "") {
           this.keybind = Abilities.GetKeybind(this.item);
           (<LabelPanel>this.panel.FindChildTraverse("hotkey")).text = this.keybind;
        }


        this.panel.SetHasClass("Muted", Items.IsMuted(this.item));
        this.panel.SetHasClass("Primary", Items.ShouldDisplayCharges(this.item));
        this.panel.SetHasClass("Secondary", Items.ShowSecondaryCharges(this.item));

        //Due to the native of inverting IsPassive, need to do empty checks first.
        if (this.item == -1) {
            this.panel.RemoveClass("Active");
        } else {
            this.panel.SetHasClass("Active", !Abilities.IsPassive(this.item));
        }

        //WTF Valve, why not just have secondary being secondary and primary being primary!
        if (Abilities.GetToggleState(this.item) || !Items.ShowSecondaryCharges(this.item)) {
            (<LabelPanel>this.panel.FindChildTraverse("primary")).text = Items.GetDisplayedCharges(this.item).toString();
            (<LabelPanel>this.panel.FindChildTraverse("secondary")).text = Items.GetSecondaryCharges(this.item).toString();
        }  else {
            (<LabelPanel>this.panel.FindChildTraverse("secondary")).text = Items.GetDisplayedCharges(this.item).toString();
            (<LabelPanel>this.panel.FindChildTraverse("primary")).text = Items.GetSecondaryCharges(this.item).toString();
        }

        let itemImage = <ImagePanel>this.panel.FindChildTraverse("bg");
        itemImage.SetImage("s2r://panorama/images/items/" + ((this.item == -1) ? "emptyitembg" : Items.GetAbilityTextureSF(this.item)) + ".png");
    }
}