// Generated by Typescript
function ShowInShop() {
}
function Sell() {
    Items.LocalPlayerSellItem($.GetContextPanel().GetAttributeInt("itemID", -1));
    $.DispatchEvent("DismissAllContextMenus");
}
function Disassemble() {
    Items.LocalPlayerDisassembleItem($.GetContextPanel().GetAttributeInt("itemID", -1));
    $.DispatchEvent("DismissAllContextMenus");
}
function Alertable() {
    Items.LocalPlayerItemAlertAllies($.GetContextPanel().GetAttributeInt("itemID", -1));
    $.DispatchEvent("DismissAllContextMenus");
}
function DropFromStash() {
    Items.LocalPlayerDropItemFromStash($.GetContextPanel().GetAttributeInt("itemID", -1));
    $.DispatchEvent("DismissAllContextMenus");
}
function MoveToStash() {
    Items.LocalPlayerMoveItemToStash($.GetContextPanel().GetAttributeInt("itemID", -1));
    $.DispatchEvent("DismissAllContextMenus");
}
function LockCombine() {
    Game.PrepareUnitOrders({
        OrderType: dotaunitorder_t.DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK,
        AbilityIndex: $.GetContextPanel().GetAttributeInt("itemID", -1)
    });
    $.DispatchEvent("DismissAllContextMenus");
}
function UnlockCombine() {
    Game.PrepareUnitOrders({
        OrderType: dotaunitorder_t.DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK,
        AbilityIndex: $.GetContextPanel().GetAttributeInt("itemID", -1),
        TargetIndex: 0 //Valve uses this as a boolean that defaults to true
    });
    $.DispatchEvent("DismissAllContextMenus");
}
